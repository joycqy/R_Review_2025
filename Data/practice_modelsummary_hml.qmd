---
title: "Introduction to `Modesummary` package"   # The document title (appears at the top of the rendered file)

format:                                         # Section to specify output formats (HTML, PDF, Word, etc.)
  html:                                         # We are telling Quarto to render the document as HTML
    self-contained: true                        # Embed all images, CSS, and JS inside a single HTML file
    toc: true                                   # Add a Table of Contents (TOC) in the HTML output
    number-sections: true                       # Number the section headers (e.g., 1, 1.1, 1.2, ...)
    mainfont: Times New Roman                   # Set the main text font to "Times New Roman"
    fig-cap-location: top                       # Place figure captions above (top) of the figure

execute:                                        # Control how code chunks are executed
  cache: false                                  # Do not cache results; re-run code every time you render
  message: false                                # Hide messages from code execution in the output
  warning: false                                # Hide warnings from code execution in the output

editor: source                                  # Open the editor in "source mode" by default in RStudio
---


# Before Starting

**Make sure you are turn on the "Render on Save".** This let you see see changes of the quarto document you are working on without having to re-render the output file every time you save this file (`Cmd + s` for MAC users, `Ctrl+S` for Windows users).

## Lerning Objectives:
+ By the end of this section, you know how to use the `modelsummary` package to create regression and summary tables that are of publication quality.

## Data
```{r}
#| label: load-packages # add a label for this chunk
#| include: false # prevents code and results from appearing in the output file.

# --- For data manipulation and visualization --- #
library(data.table)
library(dplyr)
library(ggplot2)
# --- For summary table --- #
library(modelsummary)
# --- For some data --- #
library(AER)
library(wooldridge)
```

```{r}
#| label: load-data
data(CPS1988)
# I prefer to conver the data to data.table. 
setDT(CPS1988)
```

# Introduction to `modelsummary` package

## Intoductoin

[`modelsummary`](https://modelsummary.com/) package let you create a nice summary table to report the discriptive statistics of the data and the regression results.

Today, we mainly use two functions in the `modelsummary` package:

+ `datasummary()`: to create a summary table for the descriptive statistics of the data.
+ `modelsummary()`: to create a summary table for the regression results.


Check the [documentation](https://modelsummary.com/) for more details.

::: {.callout-note}
+ There is another package called `stargazer` that can create a summary table, but it is not maintained anymore. So, I recommend to use `modelsummary` package.
+ `modelsummary` package is compatible with 
:::


## The Taste of `modelsummary` package

In the below, I show what kind of tables can be created with `modelsummary` package. Don't try to understand the code for now. See the output tables.
```{r}
#| label: tbl-ex1-datasummary
#| code-fold: true                            #makes the code collapsible in the rendered document.
#| tbl-cap: "Example of Summary Statistics"   #sets the caption of the table produced by this chunk.

datasummary(
  wage + education + experience ~ Mean + SD + Min + Max,
  data = CPS1988
  )
```


```{r}
#| label: tbl-ex2-datasummary
#| code-fold: true
#| tbl-cap: "Example regression results"
#| text-align: left

# change the base group for ethnicity to "cauc"
ex_dt <-
  copy(CPS1988) %>%
  .[,ethnicity := relevel(as.factor(ethnicity), ref = "cauc")]

ls_regs <- 
  list(
    "OLS 1" = lm(log(wage) ~ education, data = ex_dt),
    "OLS 2" = lm(log(wage) ~ education + experience + I(experience^2), data = ex_dt),
    "OLS 3" = lm(log(wage) ~ education + experience + I(experience^2) + ethnicity, data = ex_dt)
  )

modelsummary(
  models = ls_regs,
  output = "gt",
  coef_map = c(
    "education" = "Education", 
    "experience" = "Experience", 
    "I(experience^2)" = "Experience squared",
    "ethnicityafam" = "White"
    ),
  stars  =  c("*" = .05, "**" = .01, "***" = .001), 
  gof_map = c("nobs", "r.squared",  "adj.r.squared"),
  notes = list("Std. Errors in parentheses")
  )
```

## Regression Tables with `modelsummary()` function

Let's start with the `modelsummary()` function to create a summary table for the regression results.


## `modelsummary()` function

### Basics

::: {.callout-important icon=false}
### Syntax
The basic argument of the `modelsummary()` function is the list of regression models you want to report in the table.

```{r}
#| eval: false    # Do not evaluate the code in this chunk.
#| echo: true     # The code will be shown (if echo: true) but not executed
modelsummary(models=list(model1, model2, model3))
```
:::


**Example**

```{r}
#| resuls: asis
#| echo: true
reg1 <- lm(log(wage) ~ education, data = CPS1988)
reg2 <- lm(log(wage) ~ education + experience + I(experience^2), data = CPS1988)

modelsummary(models=list(reg1, reg2))
```



```{r}
modelsummary(
  models = list("OLS 1" = reg1, "OLS 2" = reg2),
  coef_map = c(
    "education" = "Education", 
    "experience" = "Experience", 
    "I(experience^2)" = "Experience squared"
    ),
  stars  =  c("*" = .05, "**" = .01, "***" = .001)
  # coef_omit = 1
  )
```


```{r}
msummary(
  models = list("OLS 1" = reg1, "OLS 2" = reg2),
  coef_map = c(
    "education" = "Education", 
    "experience" = "Experience", 
    "I(experience^2)" = "Experience squared"
    ),
  stars  =  c("*" = .05, "**" = .01, "***" = .001)
  )

```





